import { URLSearchParams } from "../index";
import { implementation as URLSearchParamsImpl } from "./URLSearchParams-impl";


export function is(obj: unknown): obj is URLSearchParams;


export function isImpl(obj: unknown): obj is URLSearchParamsImpl;


export function convert(globalObject: object, obj: unknown, { context }?: { context: string }): URLSearchParamsImpl;

export function createDefaultIterator<TIteratorKind extends "key" | "value" | "key+value">(
    globalObject: object,
    target: URLSearchParamsImpl,
    kind: TIteratorKind,
): IterableIterator<TIteratorKind extends "key" | "value" ? string : [name: string, value: string]>;


export function create(
    globalObject: object,
    constructorArgs?: readonly [
        init: ReadonlyArray<[name: string, value: string]> | { readonly [name: string]: string } | string,
    ],
    privateData?: { doNotStripQMark?: boolean | undefined },
): URLSearchParams;


export function createImpl(
    globalObject: object,
    constructorArgs?: readonly [
        init: ReadonlyArray<[name: string, value: string]> | { readonly [name: string]: string } | string,
    ],
    privateData?: { doNotStripQMark?: boolean | undefined },
): URLSearchParamsImpl;


export function setup<T extends URLSearchParams>(
    obj: T,
    globalObject: object,
    constructorArgs?: readonly [
        init: ReadonlyArray<[name: string, value: string]> | { readonly [name: string]: string } | string,
    ],
    privateData?: { doNotStripQMark?: boolean | undefined },
): T;


declare function _new(
    globalObject: object,
    newTarget?: new(
        init: ReadonlyArray<[name: string, value: string]> | { readonly [name: string]: string } | string,
    ) => URLSearchParams,
): URLSearchParamsImpl;
export { _new as new };


export function install(globalObject: object, globalNames: readonly string[]): void;
