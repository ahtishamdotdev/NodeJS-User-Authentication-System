declare module 'mongoose' {

  import stream = require('stream');

  type CursorFlag = 'tailable' | 'oplogReplay' | 'noCursorTimeout' | 'awaitData' | 'partial';

  interface EachAsyncOptions {
    parallel?: number;
    batchSize?: number;
    continueOnError?: boolean;
    signal?: AbortSignal;
  }

  class Cursor<DocType = any, Options = never, NextResultType = DocType | null> extends stream.Readable {
    [Symbol.asyncIterator](): Cursor<IteratorResult<DocType>, Options, IteratorResult<DocType>>;

    [Symbol.asyncDispose](): Promise<void>;

    
    addCursorFlag(flag: CursorFlag, value: boolean): this;

    
    close(): Promise<void>;

    
    destroy(): this;

    
    rewind(): this;

    
    eachAsync(fn: (doc: DocType[], i: number) => any, options: EachAsyncOptions & { batchSize: number }): Promise<void>;
    eachAsync(fn: (doc: DocType, i: number) => any, options?: EachAsyncOptions): Promise<void>;

    
    map<ResultType>(fn: (res: DocType) => ResultType): Cursor<ResultType, Options>;

    
    next(): Promise<NextResultType>;

    options: Options;
  }
}
