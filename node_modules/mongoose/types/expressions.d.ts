declare module 'mongoose' {

  
  type AggregationVariables =
    SpecialPathVariables |
    '$$NOW' |
    '$$CLUSTER_TIME' |
    '$$DESCEND' |
    '$$PRUNE' |
    '$$KEEP';

  type SpecialPathVariables =
    '$$ROOT' |
    '$$CURRENT' |
    '$$REMOVE';

  export namespace Expression {
    export interface Abs {
      
      $abs: Path | ArithmeticExpressionOperator;
    }

    export interface Add {
      
      $add: Expression[];
    }

    export interface Ceil {
      
      $ceil: NumberExpression;
    }

    export interface Divide {
      
      $divide: NumberExpression[];
    }

    export interface Exp {
      
      $exp: NumberExpression;
    }

    export interface Floor {
      
      $floor: NumberExpression;
    }

    export interface Ln {
      
      $ln: NumberExpression;
    }

    export interface Log {
      
      $log: [NumberExpression, NumberExpression];
    }

    export interface Log10 {
      
      $log10: NumberExpression;
    }

    export interface Mod {
      
      $mod: [NumberExpression, NumberExpression];
    }
    export interface Multiply {
      
      $multiply: NumberExpression[];
    }

    export interface Pow {
      
      $pow: [NumberExpression, NumberExpression];
    }

    export interface Round {
      
      $round: [NumberExpression, NumberExpression?];
    }

    export interface Sqrt {
      
      $sqrt: NumberExpression;
    }

    export interface Subtract {
      
      $subtract: (NumberExpression | DateExpression)[];
    }

    export interface Trunc {
      
      $trunc: [NumberExpression, NumberExpression?];
    }

    export interface Sin {
      
      $sin: NumberExpression;
    }

    export interface Cos {
      
      $cos: NumberExpression;
    }

    export interface Tan {
      
      $tan: NumberExpression;
    }

    export interface Asin {
      
      $asin: NumberExpression;
    }

    export interface Acos {
      
      $acos: NumberExpression;
    }

    export interface Atan {
      
      $atan: NumberExpression;
    }

    export interface Atan2 {
      
      $atan2: NumberExpression;
    }

    export interface Asinh {
      
      $asinh: NumberExpression;
    }

    export interface Acosh {
      
      $acosh: NumberExpression;
    }

    export interface Atanh {

      
      $atanh: NumberExpression;
    }

    export interface Sinh {
      
      $sinh: NumberExpression;
    }

    export interface Cosh {
      
      $cosh: NumberExpression;
    }

    export interface Tanh {
      
      $tanh: NumberExpression;
    }

    export interface DegreesToRadians {
      
      $degreesToRadians: NumberExpression;
    }

    export interface RadiansToDegrees {
      
      $radiansToDegrees: NumberExpression;
    }

    export interface Meta {
      
      $meta: 'textScore' | 'indexKey';
    }

    export interface DateAdd {
      
      $dateAdd: {
        
        startDate: DateExpression;
        
        unit: StringExpression<DateUnit>;
        
        amount: NumberExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface DateDiff {
      
      $dateDiff: {
        
        startDate: DateExpression;
        
        endDate: DateExpression;
        
        unit: StringExpression<DateUnit>;
        
        timezone?: tzExpression;
        
        startOfWeek?: StringExpression<StartOfWeek>;
      }
    }

    
    export interface DateFromParts {
      
      $dateFromParts: {
        
        isoWeekYear?: NumberExpression;
        
        isoWeek?: NumberExpression;
        
        isoDayOfWeek?: NumberExpression;
        
        year?: NumberExpression;
        
        month?: NumberExpression;
        
        day?: NumberExpression;
        
        hour?: NumberExpression;
        
        minute?: NumberExpression;
        
        second?: NumberExpression;
        
        millisecond?: NumberExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface DateFromString {
      
      $dateFromString: {
        dateString: StringExpression<string>;
        
        format?: FormatString;
        
        timezone?: tzExpression;
        
        onError?: Expression;
        
        onNull?: Expression;
      };
    }

    export interface DateSubtract {
      
      $dateSubtract: {
        
        startDate: DateExpression;
        
        unit: StringExpression<DateUnit>;
        
        amount: NumberExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface DateToParts {
      
      $dateToParts: {
        
        date: DateExpression;
        
        timezone?: tzExpression;
        
        iso8601?: boolean;
      };
    }

    export interface DateToString {
      
      $dateToString: {
        
        date: DateExpression;
        
        format?: FormatString;
        
        timezone?: tzExpression;
        
        onNull?: Expression;
      };
    }

    export interface DateTrunc {
      
      $dateTrunc: {
        
        date: DateExpression;
        
        unit: StringExpression<DateUnit>;
        
        binSize?: NumberExpression;
        
        timezone?: tzExpression;
        
        startOfWeek?: StringExpression<StartOfWeek>;
      }
    }

    export interface DayOfMonth {
      
      $dayOfMonth: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface DayOfWeek {
      
      $dayOfWeek: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface DayOfYear {
      
      $dayOfYear: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface Hour {
      
      $hour: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface IsoDayOfWeek {
      
      $isoDayOfWeek: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface IsoWeek {
      
      $isoWeek: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface IsoWeekYear {
      
      $isoWeekYear: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface Millisecond {
      
      $millisecond: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface Minute {
      
      $minute: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface Month {
      
      $month: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface Second {
      
      $second: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface ToDate {
      
      $toDate: Expression;
    }

    export interface Week {
      
      $week: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface Year {
      
      $year: DateExpression | {
        
        date: DateExpression;
        
        timezone?: tzExpression;
      };
    }

    export interface And {
      
      $and: (Expression | Record<string, Expression>)[];
    }

    export interface Not {
      
      $not: [Expression];
    }

    export interface Or {
      
      $or: (Expression | Record<string, Expression>)[];
    }

    export interface Cmp {
      
      $cmp: [Record<string, AnyExpression> | Expression, Record<string, AnyExpression> | Expression];
    }

    export interface Eq {
      
      $eq: AnyExpression | [AnyExpression, AnyExpression];
    }

    export interface Gt {
      
      $gt: NumberExpression | [NumberExpression, NumberExpression];
    }

    export interface Gte {
      
      $gte: NumberExpression | [NumberExpression, NumberExpression];
    }

    export interface Lt {
      
      $lt: NumberExpression | [NumberExpression, NumberExpression];
    }

    export interface Lte {
      
      $lte: NumberExpression | [NumberExpression, NumberExpression];
    }

    export interface Ne {
      
      $ne: Expression | [Expression, Expression | NullExpression] | null;
    }

    export interface Cond {
      
      $cond: { if: Expression, then: AnyExpression, else: AnyExpression } | [BooleanExpression, AnyExpression, AnyExpression];
    }

    export interface IfNull {
      
      $ifNull: Expression[];
    }

    export interface Switch {
      
      $switch: {
        
        branches: { case: Expression, then: Expression }[];
        
        default: Expression;
      };
    }

    export interface ArrayElemAt {
      
      $arrayElemAt: [ArrayExpression, NumberExpression];
    }

    export interface ArrayToObject {
      
      $arrayToObject: ArrayExpression;
    }

    export interface ConcatArrays {
      
      $concatArrays: Expression[];
    }

    export interface Filter {
      
      $filter: {
        
        input: ArrayExpression;
        
        as?: string;
        
        cond: BooleanExpression;
        
        limit?: NumberExpression;
      }
    }

    export interface First {
      
      $first: Expression;
    }

    export interface FirstN {
      
      $firstN: {
        input: Expression
        n: Expression,
      };
    }

    export interface In {
      
      $in: [Expression, ArrayExpression];
    }

    export interface IndexOfArray {
      
      $indexOfArray: [ArrayExpression, Expression] | [ArrayExpression, Expression, NumberExpression] | [ArrayExpression, Expression, NumberExpression, NumberExpression];
    }

    export interface IsArray {
      
      $isArray: [Expression];
    }

    export interface Last {
      
      $last: Expression;
    }

    export interface LastN {
      
      $lastN: {
        input: Expression
        n: Expression,
      };
    }

    export interface LinearFill {
      
      $linearFill: Expression
    }

    export interface Locf {
      
      $locf: Expression
    }

    export interface Map {
      
      $map: {
        
        input: ArrayExpression;
        
        as?: string;
        
        in: Expression;
      };
    }

    export interface ObjectToArray {
      
      $objectToArray: ObjectExpression;
    }

    export interface Range {
      
      $range: [NumberExpression, NumberExpression] | [NumberExpression, NumberExpression, NumberExpression];
    }

    export interface Reduce {
      
      $reduce: {
        
        input: ArrayExpression;
        
        initialValue: Expression;
        
        in: Expression;
      };
    }

    export interface ReverseArray {
      
      $reverseArray: ArrayExpression;
    }

    export interface Size {
      
      $size: ArrayExpression;
    }

    export interface Slice {
      
      $slice: [ArrayExpression, NumberExpression] | [ArrayExpression, NumberExpression, NumberExpression];
    }

    export interface Zip {
      
      $zip: {
        
        inputs: ArrayExpression[];
        
        useLongestLength?: boolean;
        
        defaults?: ArrayExpression;
      };
    }

    export interface Concat {
      
      $concat: StringExpression[];
    }

    export interface IndexOfBytes {
      
      $indexOfBytes: [StringExpression, StringExpression] | [StringExpression, StringExpression, NumberExpression] | [StringExpression, StringExpression, NumberExpression, NumberExpression];
    }

    export interface IndexOfCP {
      
      $indexOfCP: [StringExpression, StringExpression] | [StringExpression, StringExpression, NumberExpression] | [StringExpression, StringExpression, NumberExpression, NumberExpression];
    }

    export interface Ltrim {
      
      $ltrim: {
        
        input: StringExpression;
        
        chars?: StringExpression;
      };
    }

    export interface RegexFind {
      
      $regexFind: {
        
        input: Expression; 
        
        regex: RegExp | string;
        
        options?: RegexOptions;
      };
    }

    export interface RegexFindAll {
      
      $regexFindAll: {
        
        input: Expression; 
        
        regex: RegExp | string;
        
        options?: RegexOptions;
      };
    }

    export interface RegexMatch {
      
      $regexMatch: {
        
        input: Expression; 
        
        regex: RegExp | string;
        
        options?: RegexOptions;
      };
    }

    export interface ReplaceOne {
      
      $replaceOne: {
        
        input: StringExpression;
        
        find: StringExpression;
        
        replacement: StringExpression;
      };
    }

    export interface ReplaceAll {
      
      $replaceAll: {
        
        input: StringExpression;
        
        find: StringExpression;
        
        replacement: StringExpression;
      };
    }

    export interface Rtrim {
      
      $rtrim: {
        
        input: StringExpression;
        
        chars?: StringExpression;
      };
    }

    export interface Split {
      
      $split: [StringExpression, StringExpression];
    }

    export interface StrLenBytes {
      
      $strLenBytes: StringExpression;
    }

    export interface StrLenCP {
      
      $strLenCP: StringExpression;
    }

    export interface Strcasecmp {
      
      $strcasecmp: [StringExpression, StringExpression];
    }

    export interface Substr {
      
      $substr: [StringExpression, number, number];
    }

    export interface SubstrBytes {
      
      $substrBytes: [StringExpression, number, number];
    }

    export interface SubstrCP {
      
      $substrCP: [StringExpression, number, number];
    }

    export interface ToLower {
      
      $toLower: StringExpression;
    }

    export interface ToString {
      
      $toString: Expression;
    }

    export interface Trim {
      
      $trim: {
        
        input: StringExpression;
        
        chars?: StringExpression;
      };
    }

    export interface ToUpper {
      
      $toUpper: StringExpression;
    }

    export interface Literal {

      
      $literal: any;
    }

    export interface GetField {

      
      $getField: {
        
        field: StringExpression;
        
        input?: ObjectExpression | SpecialPathVariables | NullExpression;
      }
    }

    export interface Rand {

      
      $rand: Record<string | number | symbol, never>;
    }

    export interface SampleRate {

      
      $sampleRate: number;
    }

    export interface MergeObjects {

      
      $mergeObjects: ObjectExpression | ObjectExpression[] | ArrayExpression | Record<string, string>;
    }

    export interface SetField {

      
      $setField: {
        
        field: StringExpression;
        
        input?: ObjectExpression | NullExpression;
        
        value?: Expression | SpecialPathVariables;
      }
    }

    export interface UnsetField {

      
      $unsetField: {
        
        field: StringExpression;
        
        input?: ObjectExpression | SpecialPathVariables | NullExpression;
      }
    }

    export interface Let {

      
      $let: {
        
        vars: { [key: string]: Expression; };
        
        in: Expression;
      }
    }

    export interface AllElementsTrue {
      
      $allElementsTrue: ArrayExpression;
    }

    export interface AnyElementsTrue {
      
      $anyElementTrue: ArrayExpression;
    }

    export interface SetDifference {
      
      $setDifference: [ArrayExpression, ArrayExpression];
    }

    export interface SetEquals {
      
      $setEquals: ArrayExpression[];
    }

    export interface SetIntersection {
      
      $setIntersection: ArrayExpression[];
    }

    export interface SetIsSubset {
      
      $setIsSubset: [ArrayExpression, ArrayExpression];
    }

    export interface SetUnion {
      
      $setUnion: ArrayExpression[];
    }

    export interface Accumulator {
      
      $accumulator: {
        
        init: CodeExpression;
        
        initArgs?: ArrayExpression;
        
        accumulate: CodeExpression;
        
        accumulateArgs: ArrayExpression;
        
        merge: CodeExpression;
        
        finalize?: CodeExpression;
        
        lang: 'js';
      }
    }

    export interface AddToSet {
      
      $addToSet: Expression | Record<string, Expression>;
    }

    export interface Avg {
      
      $avg: Expression;
    }

    export interface Bottom {
      
      $bottom: {
        sortBy: AnyObject,
        output: Expression
      };
    }

    export interface BottomN {
      
      $bottomN: {
        n: Expression,
        sortBy: AnyObject,
        output: Expression
      };
    }

    export interface Count {
      
      $count: Record<string | number | symbol, never> | Path;
    }

    export interface CovariancePop {
      
      $covariancePop: [NumberExpression, NumberExpression];
    }

    export interface CovarianceSamp {
      
      $covarianceSamp: [NumberExpression, NumberExpression];
    }

    export interface DenseRank {
      
      $denseRank: Record<string | number | symbol, never>;
    }

    export interface Derivative {
      
      $derivative: {
        
        input: NumberExpression;
        
        unit?: DateUnit;
      }
    }

    export interface DocumentNumber {
      
      $documentNumber: Record<string | number | symbol, never>;
    }

    export interface ExpMovingAvg {
      
      $expMovingAvg: {
        
        input: Expression;

        
        N: NumberExpression;

        
        alpha?: never;
      } |
      {
        
        input: Expression;

        
        N?: never;

        
        alpha: NumberExpression;
      }
    }

    export interface Integral {
      
      $integral: {
        
        input: NumberExpression;

        
        unit?: DateUnit;
      }
    }

    export interface Max {
      
      $max: Expression | Expression[];
    }

    export interface MaxN {
      
      $maxN: {
        input: Expression
        n: Expression,
      };
    }

    export interface Min {
      
      $min: Expression | Expression[];
    }

    export interface MinN {
      
      $minN: {
        input: Expression
        n: Expression,
      };
    }

    export interface Push {
      
      $push: Expression | Record<string, Expression>;
    }

    export interface Rank {
      
      $rank: Record<string | number | symbol, never>;
    }

    export interface Shift {
      
      $shift: {
        
        output: Expression;
        
        by: number;
        
        default?: Expression;
      }
    }

    export interface Median {
      
      $median: {
        input: number | Expression,
        method: 'approximate'
      }
    }

    export interface StdDevPop {
      
      $stdDevPop: Expression;
    }

    export interface StdDevSamp {
      
      $stdDevSamp: Expression;
    }

    export interface Sum {
      
      $sum: number | Expression | Expression[];
    }

    export interface Convert<K extends 'double' | 1 | 'string' | 2 | 'objectId' | 7 | 'bool' | 8 | 'date' | 9 | 'int' | 16 | 'long' | 18 | 'decimal' | 19 = 'double' | 1 | 'string' | 2 | 'objectId' | 7 | 'bool' | 8 | 'date' | 9 | 'int' | 16 | 'long' | 18 | 'decimal' | 19> {
      
      $convert: {
        input: Expression;
        to: K;
        onError?: Expression;
        onNull?: Expression;
      };
    }

    export interface IsNumber {
      
      $isNumber: Expression;
    }

    export interface ToBool {
      
      $toBool: Expression;
    }

    export interface ToDecimal {
      
      $toDecimal: Expression;
    }

    export interface ToDouble {
      
      $toDouble: Expression;
    }

    export interface ToInt {
      
      $toInt: Expression;
    }

    export interface ToLong {
      
      $toLong: Expression;
    }

    export interface ToObjectId {
      
      $toObjectId: Expression;
    }

    export interface Top {
      $top: {
        sortBy: AnyObject,
        output: Expression
      };
    }

    export interface TopN {
      $topN: {
        n: Expression,
        sortBy: AnyObject,
        output: Expression
      };
    }

    export interface ToString {
      
      $toString: Expression;
    }

    export interface Type {
      
      $type: Expression;
    }

    export interface BinarySize {
      
      $binarySize: NullExpression | StringExpression | BinaryExpression;
    }

    export interface BsonSize {
      
      $bsonSize: NullExpression | ObjectExpression;
    }

    export interface Function {
      
      $function: {
        
        body: CodeExpression;
        
        args: ArrayExpression;
        
        lang: 'js'
      };
    }
  }

  type Path = string;


  export type Expression =
    Path |
    ArithmeticExpressionOperator |
    ArrayExpressionOperator |
    BooleanExpressionOperator |
    ComparisonExpressionOperator |
    ConditionalExpressionOperator |
    CustomAggregationExpressionOperator |
    DataSizeOperator |
    DateExpressionOperator |
    LiteralExpressionOperator |
    MiscellaneousExpressionOperator |
    ObjectExpressionOperator |
    SetExpressionOperator |
    StringExpressionOperator |
    TextExpressionOperator |
    TrigonometryExpressionOperator |
    TypeExpressionOperator |
    AccumulatorOperator |
    VariableExpressionOperator |
    WindowOperator |
    Expression.Top |
    Expression.TopN |
    any;

  export type NullExpression = null;

  export type CodeExpression =
    string |
    Function;

  export type BinaryExpression =
    Path;

  export type FunctionExpression =
    Expression.Function;

  export type AnyExpression =
    ArrayExpression |
    BooleanExpression |
    NumberExpression |
    ObjectExpression |
    StringExpression |
    DateExpression |
    BinaryExpression |
    FunctionExpression |
    ObjectIdExpression |
    ConditionalExpressionOperator |
    any;

  export type ObjectIdExpression =
    TypeExpressionOperatorReturningObjectId;

  export type ArrayExpression<T = any> =
    T[] |
    Path |
    ArrayExpressionOperatorReturningAny |
    ArrayExpressionOperatorReturningArray |
    StringExpressionOperatorReturningArray |
    ObjectExpressionOperatorReturningArray |
    SetExpressionOperatorReturningArray |
    LiteralExpressionOperatorReturningAny |
    WindowOperatorReturningArray |
    CustomAggregationExpressionOperatorReturningAny |
    WindowOperatorReturningAny;

  export type BooleanExpression =
    boolean |
    Path |
    BooleanExpressionOperator |
    ArrayExpressionOperatorReturningAny |
    ComparisonExpressionOperatorReturningBoolean |
    StringExpressionOperatorReturningBoolean |
    SetExpressionOperatorReturningBoolean |
    LiteralExpressionOperatorReturningAny |
    CustomAggregationExpressionOperatorReturningAny |
    TypeExpressionOperatorReturningBoolean;

  export type NumberExpression =
    number |
    Path |
    ArrayExpressionOperatorReturningAny |
    ArrayExpressionOperatorReturningNumber |
    ArithmeticExpressionOperator |
    ComparisonExpressionOperatorReturningNumber |
    TrigonometryExpressionOperator |
    MiscellaneousExpressionOperatorReturningNumber |
    StringExpressionOperatorReturningNumber |
    LiteralExpressionOperatorReturningAny |
    ObjectExpressionOperator |
    SetExpressionOperator |
    WindowOperatorReturningNumber |
    WindowOperatorReturningAny |
    DataSizeOperatorReturningNumber |
    CustomAggregationExpressionOperatorReturningAny |
    TypeExpressionOperatorReturningNumber |
    DateExpression |
    DateExpressionOperatorReturningNumber;

  export type ObjectExpression =
    Path |
    ArrayExpressionOperatorReturningAny |
    DateExpressionOperatorReturningObject |
    StringExpressionOperatorReturningObject |
    ObjectExpressionOperatorReturningObject |
    CustomAggregationExpressionOperatorReturningAny |
    LiteralExpressionOperatorReturningAny;

  export type StringExpression<T = string> =
    Path |
    ArrayExpressionOperatorReturningAny |
    DateExpressionOperatorReturningString |
    StringExpressionOperatorReturningString |
    LiteralExpressionReturningAny |
    CustomAggregationExpressionOperatorReturningAny |
    TypeExpressionOperatorReturningString |
    T;

  export type DateExpression =
    Path |
    NativeDate |
    DateExpressionOperatorReturningDate |
    TypeExpressionOperatorReturningDate |
    LiteralExpressionReturningAny;

  export type ArithmeticExpressionOperator =
    Expression.Abs |
    Expression.Add |
    Expression.Ceil |
    Expression.Divide |
    Expression.Exp |
    Expression.Floor |
    Expression.Ln |
    Expression.Log |
    Expression.Log10 |
    Expression.Mod |
    Expression.Multiply |
    Expression.Pow |
    Expression.Round |
    Expression.Sqrt |
    Expression.Subtract |
    Expression.Trunc;

  export type ArrayExpressionOperator =
    ArrayExpressionOperatorReturningAny |
    ArrayExpressionOperatorReturningBoolean |
    ArrayExpressionOperatorReturningNumber |
    ArrayExpressionOperatorReturningObject;

  export type LiteralExpressionOperator =
    Expression.Literal;

  export type LiteralExpressionReturningAny =
    LiteralExpressionOperatorReturningAny;

  export type LiteralExpressionOperatorReturningAny =
    Expression.Literal;

  export type MiscellaneousExpressionOperator =
    Expression.Rand |
    Expression.SampleRate;

  export type MiscellaneousExpressionOperatorReturningNumber =
    Expression.Rand;

  export type ArrayExpressionOperatorReturningAny =
    Expression.ArrayElemAt |
    Expression.First |
    Expression.Last |
    Expression.Reduce;

  export type ArrayExpressionOperatorReturningArray =
    Expression.ConcatArrays |
    Expression.Filter |
    Expression.FirstN |
    Expression.LastN |
    Expression.Map |
    Expression.ObjectToArray |
    Expression.Range |
    Expression.ReverseArray |
    Expression.Slice |
    Expression.Zip;

  export type ArrayExpressionOperatorReturningNumber =
    Expression.IndexOfArray |
    Expression.Size;

  export type ArrayExpressionOperatorReturningObject =
    Expression.ArrayToObject;

  export type ArrayExpressionOperatorReturningBoolean =
    Expression.In |
    Expression.IsArray;

  export type BooleanExpressionOperator =
    Expression.And |
    Expression.Or |
    Expression.Not;

  export type ComparisonExpressionOperator =
    ComparisonExpressionOperatorReturningBoolean |
    ComparisonExpressionOperatorReturningNumber;

  export type ComparisonExpressionOperatorReturningBoolean =
    Expression.Eq |
    Expression.Gt |
    Expression.Gte |
    Expression.Lt |
    Expression.Lte |
    Expression.Ne;

  export type ComparisonExpressionOperatorReturningNumber =
    Expression.Cmp;

  export type ConditionalExpressionOperator =
    Expression.Cond |
    Expression.IfNull |
    Expression.Switch;

  export type StringExpressionOperator =
    StringExpressionOperatorReturningArray |
    StringExpressionOperatorReturningBoolean |
    StringExpressionOperatorReturningNumber |
    StringExpressionOperatorReturningObject |
    StringExpressionOperatorReturningString;

  export type StringExpressionOperatorReturningArray =
    Expression.RegexFindAll |
    Expression.Split;

  export type StringExpressionOperatorReturningBoolean =
    Expression.RegexMatch;

  export type StringExpressionOperatorReturningNumber =
    Expression.IndexOfBytes |
    Expression.IndexOfCP |
    Expression.Strcasecmp |
    Expression.StrLenBytes |
    Expression.StrLenCP;

  export type StringExpressionOperatorReturningObject =
    Expression.RegexFind;

  export type StringExpressionOperatorReturningString =
    Expression.Concat |
    Expression.Ltrim |
    Expression.Ltrim |
    Expression.ReplaceOne |
    Expression.ReplaceAll |
    Expression.Substr |
    Expression.SubstrBytes |
    Expression.SubstrCP |
    Expression.ToLower |
    Expression.ToString |
    Expression.ToUpper |
    Expression.Trim;

  export type ObjectExpressionOperator =
    Expression.MergeObjects |
    Expression.ObjectToArray |
    Expression.SetField |
    Expression.UnsetField;

  export type ObjectExpressionOperatorReturningArray =
    Expression.ObjectToArray;

  export type ObjectExpressionOperatorReturningObject =
    Expression.MergeObjects |
    Expression.SetField |
    Expression.UnsetField;

  export type VariableExpressionOperator =
    Expression.Let;

  export type VariableExpressionOperatorReturningAny =
    Expression.Let;

  export type SetExpressionOperator =
    Expression.AllElementsTrue |
    Expression.AnyElementsTrue |
    Expression.SetDifference |
    Expression.SetEquals |
    Expression.SetIntersection |
    Expression.SetIsSubset |
    Expression.SetUnion;

  export type SetExpressionOperatorReturningBoolean =
    Expression.AllElementsTrue |
    Expression.AnyElementsTrue |
    Expression.SetEquals |
    Expression.SetIsSubset;

  export type SetExpressionOperatorReturningArray =
    Expression.SetDifference |
    Expression.SetIntersection |
    Expression.SetUnion;

  
  export type TrigonometryExpressionOperator =
    Expression.Sin |
    Expression.Cos |
    Expression.Tan |
    Expression.Asin |
    Expression.Acos |
    Expression.Atan |
    Expression.Atan2 |
    Expression.Asinh |
    Expression.Acosh |
    Expression.Atanh |
    Expression.Sinh |
    Expression.Cosh |
    Expression.Tanh |
    Expression.DegreesToRadians |
    Expression.RadiansToDegrees;

  export type TextExpressionOperator =
    Expression.Meta;

  export type WindowOperator =
    Expression.AddToSet |
    Expression.Avg |
    Expression.Count |
    Expression.CovariancePop |
    Expression.CovarianceSamp |
    Expression.DenseRank |
    Expression.Derivative |
    Expression.DocumentNumber |
    Expression.ExpMovingAvg |
    Expression.First |
    Expression.FirstN |
    Expression.Integral |
    Expression.Last |
    Expression.LastN |
    Expression.LinearFill |
    Expression.Locf |
    Expression.Max |
    Expression.MaxN |
    Expression.Median |
    Expression.Min |
    Expression.MinN |
    Expression.Push |
    Expression.Rank |
    Expression.Shift |
    Expression.StdDevPop |
    Expression.StdDevSamp |
    Expression.Sum;

  export type WindowOperatorReturningAny =
    Expression.First |
    Expression.Last |
    Expression.Shift;

  export type WindowOperatorReturningArray =
    Expression.AddToSet |
    Expression.FirstN |
    Expression.LastN |
    Expression.MaxN |
    Expression.MinN |
    Expression.Push;

  export type WindowOperatorReturningNumber =
    Expression.Avg |
    Expression.Count |
    Expression.CovariancePop |
    Expression.CovarianceSamp |
    Expression.DenseRank |
    Expression.DocumentNumber |
    Expression.ExpMovingAvg |
    Expression.Integral |
    Expression.Max |
    Expression.Median |
    Expression.Min |
    Expression.StdDevPop |
    Expression.StdDevSamp |
    Expression.Sum;

  export type TypeExpressionOperator =
    Expression.Convert |
    Expression.IsNumber |
    Expression.ToBool |
    Expression.ToDate |
    Expression.ToDecimal |
    Expression.ToDouble |
    Expression.ToInt |
    Expression.ToLong |
    Expression.ToObjectId |
    Expression.ToString |
    Expression.Type;

  export type TypeExpressionOperatorReturningNumber =
    Expression.Convert<'double' | 1 | 'int' | 16 | 'long' | 18 | 'decimal' | 19> |
    Expression.ToDecimal |
    Expression.ToDouble |
    Expression.ToInt |
    Expression.ToLong;

  export type TypeExpressionOperatorReturningBoolean =
    Expression.Convert<'bool' | 8> |
    Expression.IsNumber |
    Expression.ToBool;


  export type TypeExpressionOperatorReturningString =
    Expression.Convert<'string' | 2> |
    Expression.ToString |
    Expression.Type;

  export type TypeExpressionOperatorReturningObjectId =
    Expression.Convert<'objectId' | 7> |
    Expression.ToObjectId;

  export type TypeExpressionOperatorReturningDate =
    Expression.Convert<'date' | 9> |
    Expression.ToDate;

  export type DataSizeOperator =
    Expression.BinarySize |
    Expression.BsonSize;

  export type DataSizeOperatorReturningNumber =
    Expression.BinarySize |
    Expression.BsonSize;

  export type CustomAggregationExpressionOperator =
    Expression.Accumulator |
    Expression.Function;

  export type CustomAggregationExpressionOperatorReturningAny =
    Expression.Function;

  export type AccumulatorOperator =
    Expression.Accumulator |
    Expression.AddToSet |
    Expression.Avg |
    Expression.Bottom |
    Expression.BottomN |
    Expression.Count |
    Expression.First |
    Expression.FirstN |
    Expression.Last |
    Expression.LastN |
    Expression.Max |
    Expression.MaxN |
    Expression.Median |
    Expression.MergeObjects |
    Expression.Min |
    Expression.MinN |
    Expression.Push |
    Expression.StdDevPop |
    Expression.StdDevSamp |
    Expression.Sum |
    Expression.Top |
    Expression.TopN;

  export type tzExpression = UTCOffset | StringExpressionOperatorReturningBoolean | string;

  type hh = '-00' | '-01' | '-02' | '-03' | '-04' | '-05' | '-06' | '-07' | '-08' | '-09' | '-10' | '-11' | '-12' |
  '+00' | '+01' | '+02' | '+03' | '+04' | '+05' | '+06' | '+07' | '+08' | '+09' | '+10' | '+11' | '+12' | '+13' | '+14';
  type mm = '00' | '30' | '45';

  type UTCOffset = `${hh}` | `${hh}${mm}` | `${hh}:${mm}`;

  type RegexOptions =
    'i' | 'm' | 's' | 'x' |
    'is' | 'im' | 'ix' | 'si' | 'sm' | 'sx' | 'mi' | 'ms' | 'mx' | 'xi' | 'xs' | 'xm' |
    'ism' | 'isx' | 'ims' | 'imx' | 'ixs' | 'ixm' | 'sim' | 'six' | 'smi' | 'smx' | 'sxi' | 'sxm' | 'mis' | 'mix' | 'msi' | 'msx' | 'mxi' | 'mxs' | 'xis' | 'xim' | 'xsi' | 'xsm' | 'xmi' | 'xms' |
    'ismx' | 'isxm' | 'imsx' | 'imxs' | 'ixsm' | 'ixms' | 'simx' | 'sixm' | 'smix' | 'smxi' | 'sxim' | 'sxmi' | 'misx' | 'mixs' | 'msix' | 'msxi' | 'mxis' | 'mxsi' | 'xism' | 'xims' | 'xsim' | 'xsmi' | 'xmis' | 'xmsi';

  type StartOfWeek =
    'monday' | 'mon' |
    'tuesday' | 'tue' |
    'wednesday' | 'wed' |
    'thursday' | 'thu' |
    'friday' | 'fri' |
    'saturday' | 'sat' |
    'sunday' | 'sun';

  type DateUnit = 'year' | 'quarter' | 'week' | 'month' | 'day' | 'hour' | 'minute' | 'second' | 'millisecond';

  type FormatString = string;

  export type DateExpressionOperator =
    DateExpressionOperatorReturningDate |
    DateExpressionOperatorReturningNumber |
    DateExpressionOperatorReturningString |
    DateExpressionOperatorReturningObject;

  export type DateExpressionOperatorReturningObject =
    Expression.DateToParts;

  export type DateExpressionOperatorReturningNumber =
    Expression.DateDiff |
    Expression.DayOfMonth |
    Expression.DayOfWeek |
    Expression.DayOfYear |
    Expression.IsoDayOfWeek |
    Expression.IsoWeek |
    Expression.IsoWeekYear |
    Expression.Millisecond |
    Expression.Second |
    Expression.Minute |
    Expression.Hour |
    Expression.Month |
    Expression.Year;

  export type DateExpressionOperatorReturningDate =
    Expression.DateAdd |
    Expression.DateFromParts |
    Expression.DateFromString |
    Expression.DateSubtract |
    Expression.DateTrunc |
    Expression.ToDate;

  export type DateExpressionOperatorReturningString =
    Expression.DateToString;

}
