
var util = require('util')
  , OAuth2Strategy = require('passport-oauth2')
  , Profile = require('./profile')
  , InternalOAuthError = require('passport-oauth2').InternalOAuthError;


function Strategy(options, verify) {
  options = options || {};
  options.authorizationURL = options.authorizationURL || 'https:
  options.tokenURL = options.tokenURL || 'https:
  options.scopeSeparator = options.scopeSeparator || ',';
  options.customHeaders = options.customHeaders || {};

  if (!options.customHeaders['User-Agent']) {
    options.customHeaders['User-Agent'] = options.userAgent || 'passport-github';
  }

  OAuth2Strategy.call(this, options, verify);
  this.name = options.name || 'github';
  this._userProfileURL = options.userProfileURL || 'https:
  this._userEmailURL = options.userEmailURL || 'https:
  this._oauth2.useAuthorizationHeaderforGET(true);
  this._allRawEmails = options.allRawEmails || false;
}


util.inherits(Strategy, OAuth2Strategy);


Strategy.prototype.userProfile = function(accessToken, done) {
  var self = this;

  this._oauth2.get(this._userProfileURL, accessToken, function (err, body, res) {
    var json;

    if (err) {
      return done(new InternalOAuthError('Failed to fetch user profile', err));
    }

    try {
      json = JSON.parse(body);
    } catch (ex) {
      return done(new Error('Failed to parse user profile'));
    }

    var profile = Profile.parse(json);
    profile.provider  = 'github';
    profile._raw = body;
    profile._json = json;

    var canAccessEmail = false;
    var scopes = self._scope;
    if (typeof scopes === 'string') {
      scopes = scopes.split(self._scopeSeparator);
    }
    if (Array.isArray(scopes)) {
      canAccessEmail = scopes.some(function(scope) {
        return scope === 'user' || scope === 'user:email';
      });
    }
    if (!canAccessEmail) {
      return done(null, profile);
    }

    
    self._oauth2.get(self._userEmailURL, accessToken, function (err, body, res) {
      if (err) {
        return done(new InternalOAuthError('Failed to fetch user emails', err));
      }

      var json = JSON.parse(body);

      if (!json || !json.length) {
        return done(new Error('Failed to fetch user emails'));
      }

      if (self._allRawEmails) {
        profile.emails = json.map(function (email) {
          email.value = email.email;
          delete email.email;
          return email;
        });
      } else {
        for (var index in json) {
          if (json[index].primary) {
            profile.emails = [{ value: json[index].email }];
            break;
          }
        }
      }

      done(null, profile);
    });
  });
};


module.exports = Strategy;
