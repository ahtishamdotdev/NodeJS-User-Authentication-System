
var OAuth2Strategy = require('passport-oauth2')
  , util = require('util')
  , uri = require('url')
  , GooglePlusProfile = require('./profile/googleplus')
  , OpenIDProfile = require('./profile/openid')
  , InternalOAuthError = require('passport-oauth2').InternalOAuthError
  , GooglePlusAPIError = require('./errors/googleplusapierror')
  , UserInfoError = require('./errors/userinfoerror');



function Strategy(options, verify) {
  options = options || {};
  options.authorizationURL = options.authorizationURL || 'https:
  options.tokenURL = options.tokenURL || 'https:

  OAuth2Strategy.call(this, options, verify);
  this.name = 'google';
  this._userProfileURL = options.userProfileURL || 'https:
  
  var url = uri.parse(this._userProfileURL);
  if (url.pathname.indexOf('/userinfo') == (url.pathname.length - '/userinfo'.length)) {
    this._userProfileFormat = 'openid';
  } else {
    this._userProfileFormat = 'google+'; 
  }
}


util.inherits(Strategy, OAuth2Strategy);



Strategy.prototype.userProfile = function(accessToken, done) {
  var self = this;
  this._oauth2.get(this._userProfileURL, accessToken, function (err, body, res) {
    var json;
    
    if (err) {
      if (err.data) {
        try {
          json = JSON.parse(err.data);
        } catch (_) {}
      }
      
      if (json && json.error && json.error.message) {
        return done(new GooglePlusAPIError(json.error.message, json.error.code));
      } else if (json && json.error && json.error_description) {
        return done(new UserInfoError(json.error_description, json.error));
      }
      return done(new InternalOAuthError('Failed to fetch user profile', err));
    }
    
    try {
      json = JSON.parse(body);
    } catch (ex) {
      return done(new Error('Failed to parse user profile'));
    }
    
    var profile;
    switch (self._userProfileFormat) {
    case 'openid':
      profile = OpenIDProfile.parse(json);
      break;
    default: 
      profile = GooglePlusProfile.parse(json);
      break;
    }
    
    profile.provider  = 'google';
    profile._raw = body;
    profile._json = json;
    
    done(null, profile);
  });
}


Strategy.prototype.authorizationParams = function(options) {
  var params = {};
  
  
  if (options.accessType) {
    params['access_type'] = options.accessType;
  }
  if (options.prompt) {
    params['prompt'] = options.prompt;
  }
  if (options.loginHint) {
    params['login_hint'] = options.loginHint;
  }
  if (options.includeGrantedScopes) {
    params['include_granted_scopes'] = true;
  }
  
  
  if (options.display) {
    
    
    params['display'] = options.display;
  }
  
  
  if (options.hostedDomain || options.hd) {
    
    
    
    params['hd'] = options.hostedDomain || options.hd;
  }
  
  
  if (options.requestVisibleActions) {
    
    
    
    
    params['request_visible_actions'] = options.requestVisibleActions;
  }
  
  
  if (options.openIDRealm) {
    
    
    params['openid.realm'] = options.openIDRealm;
  }
  
  
  if (options.approvalPrompt) {
    params['approval_prompt'] = options.approvalPrompt;
  }
  if (options.userID) {
    
    
    params['user_id'] = options.userID;
  }
  
  return params;
}



module.exports = Strategy;
