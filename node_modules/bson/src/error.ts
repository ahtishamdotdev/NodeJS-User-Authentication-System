import { BSON_MAJOR_VERSION } from './constants';


export class BSONError extends Error {
  
  protected get bsonError(): true {
    return true;
  }

  override get name(): string {
    return 'BSONError';
  }

  constructor(message: string, options?: { cause?: unknown }) {
    super(message, options);
  }

  
  public static isBSONError(value: unknown): value is BSONError {
    return (
      value != null &&
      typeof value === 'object' &&
      'bsonError' in value &&
      value.bsonError === true &&
      
      'name' in value &&
      'message' in value &&
      'stack' in value
    );
  }
}


export class BSONVersionError extends BSONError {
  get name(): 'BSONVersionError' {
    return 'BSONVersionError';
  }

  constructor() {
    super(`Unsupported BSON version, bson types must be from bson ${BSON_MAJOR_VERSION}.x.x`);
  }
}


export class BSONRuntimeError extends BSONError {
  get name(): 'BSONRuntimeError' {
    return 'BSONRuntimeError';
  }

  constructor(message: string) {
    super(message);
  }
}


export class BSONOffsetError extends BSONError {
  public get name(): 'BSONOffsetError' {
    return 'BSONOffsetError';
  }

  public offset: number;

  constructor(message: string, offset: number, options?: { cause?: unknown }) {
    super(`${message}. offset: ${offset}`, options);
    this.offset = offset;
  }
}
