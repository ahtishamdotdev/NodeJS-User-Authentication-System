
export function tryReadBasicLatin(
  uint8array: Uint8Array,
  start: number,
  end: number
): string | null {
  if (uint8array.length === 0) {
    return '';
  }

  const stringByteLength = end - start;
  if (stringByteLength === 0) {
    return '';
  }

  if (stringByteLength > 20) {
    return null;
  }

  if (stringByteLength === 1 && uint8array[start] < 128) {
    return String.fromCharCode(uint8array[start]);
  }

  if (stringByteLength === 2 && uint8array[start] < 128 && uint8array[start + 1] < 128) {
    return String.fromCharCode(uint8array[start]) + String.fromCharCode(uint8array[start + 1]);
  }

  if (
    stringByteLength === 3 &&
    uint8array[start] < 128 &&
    uint8array[start + 1] < 128 &&
    uint8array[start + 2] < 128
  ) {
    return (
      String.fromCharCode(uint8array[start]) +
      String.fromCharCode(uint8array[start + 1]) +
      String.fromCharCode(uint8array[start + 2])
    );
  }

  const latinBytes = [];
  for (let i = start; i < end; i++) {
    const byte = uint8array[i];
    if (byte > 127) {
      return null;
    }
    latinBytes.push(byte);
  }

  return String.fromCharCode(...latinBytes);
}


export function tryWriteBasicLatin(
  destination: Uint8Array,
  source: string,
  offset: number
): number | null {
  if (source.length === 0) return 0;

  if (source.length > 25) return null;

  if (destination.length - offset < source.length) return null;

  for (
    let charOffset = 0, destinationOffset = offset;
    charOffset < source.length;
    charOffset++, destinationOffset++
  ) {
    const char = source.charCodeAt(charOffset);
    if (char > 127) return null;

    destination[destinationOffset] = char;
  }

  return source.length;
}
