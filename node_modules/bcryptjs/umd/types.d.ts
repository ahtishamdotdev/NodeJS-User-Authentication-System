



type Callback<T> = (err: Error | null, result?: T) => void;

type ProgressCallback = (percentage: number) => void;

type RandomFallback = (length: number) => number[];


export declare function setRandomFallback(random: RandomFallback): void;


export declare function genSaltSync(rounds?: number): string;


export declare function genSalt(rounds?: number): Promise<string>;


export declare function genSalt(callback: Callback<string>): void;


export declare function genSalt(
  rounds: number,
  callback: Callback<string>,
): void;


export declare function hashSync(
  password: string,
  salt?: number | string,
): string;


export declare function hash(
  password: string,
  salt: number | string,
): Promise<string>;


export declare function hash(
  password: string,
  salt: number | string,
  callback?: Callback<string>,
  progressCallback?: ProgressCallback,
): void;


export declare function compareSync(password: string, hash: string): boolean;


export declare function compare(
  password: string,
  hash: string,
): Promise<boolean>;


export declare function compare(
  password: string,
  hash: string,
  callback?: Callback<boolean>,
  progressCallback?: ProgressCallback,
): void;


export declare function getRounds(hash: string): number;


export declare function getSalt(hash: string): string;


export declare function truncates(password: string): boolean;


export declare function encodeBase64(
  b: Readonly<ArrayLike<number>>,
  len: number,
): string;


export declare function decodeBase64(s: string, len: number): number[];
