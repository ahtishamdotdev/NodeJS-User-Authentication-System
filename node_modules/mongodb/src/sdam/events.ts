import type { Document } from '../bson';
import {
  SERVER_CLOSED,
  SERVER_DESCRIPTION_CHANGED,
  SERVER_HEARTBEAT_FAILED,
  SERVER_HEARTBEAT_STARTED,
  SERVER_HEARTBEAT_SUCCEEDED,
  SERVER_OPENING,
  TOPOLOGY_CLOSED,
  TOPOLOGY_DESCRIPTION_CHANGED,
  TOPOLOGY_OPENING
} from '../constants';
import type { ServerDescription } from './server_description';
import type { TopologyDescription } from './topology_description';


export class ServerDescriptionChangedEvent {
  
  topologyId: number;
  
  address: string;
  
  previousDescription: ServerDescription;
  
  newDescription: ServerDescription;
  name = SERVER_DESCRIPTION_CHANGED;

  
  constructor(
    topologyId: number,
    address: string,
    previousDescription: ServerDescription,
    newDescription: ServerDescription
  ) {
    this.topologyId = topologyId;
    this.address = address;
    this.previousDescription = previousDescription;
    this.newDescription = newDescription;
  }
}


export class ServerOpeningEvent {
  
  topologyId: number;
  
  address: string;
  
  name = SERVER_OPENING;

  
  constructor(topologyId: number, address: string) {
    this.topologyId = topologyId;
    this.address = address;
  }
}


export class ServerClosedEvent {
  
  topologyId: number;
  
  address: string;
  
  name = SERVER_CLOSED;

  
  constructor(topologyId: number, address: string) {
    this.topologyId = topologyId;
    this.address = address;
  }
}


export class TopologyDescriptionChangedEvent {
  
  topologyId: number;
  
  previousDescription: TopologyDescription;
  
  newDescription: TopologyDescription;
  
  name = TOPOLOGY_DESCRIPTION_CHANGED;

  
  constructor(
    topologyId: number,
    previousDescription: TopologyDescription,
    newDescription: TopologyDescription
  ) {
    this.topologyId = topologyId;
    this.previousDescription = previousDescription;
    this.newDescription = newDescription;
  }
}


export class TopologyOpeningEvent {
  
  topologyId: number;
  
  name = TOPOLOGY_OPENING;

  
  constructor(topologyId: number) {
    this.topologyId = topologyId;
  }
}


export class TopologyClosedEvent {
  
  topologyId: number;
  
  name = TOPOLOGY_CLOSED;

  
  constructor(topologyId: number) {
    this.topologyId = topologyId;
  }
}


export class ServerHeartbeatStartedEvent {
  
  connectionId: string;
  
  awaited: boolean;
  
  name = SERVER_HEARTBEAT_STARTED;

  
  constructor(connectionId: string, awaited: boolean) {
    this.connectionId = connectionId;
    this.awaited = awaited;
  }
}


export class ServerHeartbeatSucceededEvent {
  
  connectionId: string;
  
  duration: number;
  
  reply: Document;
  
  awaited: boolean;
  
  name = SERVER_HEARTBEAT_SUCCEEDED;

  
  constructor(connectionId: string, duration: number, reply: Document | null, awaited: boolean) {
    this.connectionId = connectionId;
    this.duration = duration;
    this.reply = reply ?? {};
    this.awaited = awaited;
  }
}


export class ServerHeartbeatFailedEvent {
  
  connectionId: string;
  
  duration: number;
  
  failure: Error;
  
  awaited: boolean;
  
  name = SERVER_HEARTBEAT_FAILED;

  
  constructor(connectionId: string, duration: number, failure: Error, awaited: boolean) {
    this.connectionId = connectionId;
    this.duration = duration;
    this.failure = failure;
    this.awaited = awaited;
  }
}
