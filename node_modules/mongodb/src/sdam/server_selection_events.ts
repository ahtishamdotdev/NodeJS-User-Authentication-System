import { HostAddress } from '.././utils';
import {
  SERVER_SELECTION_FAILED,
  SERVER_SELECTION_STARTED,
  SERVER_SELECTION_SUCCEEDED,
  WAITING_FOR_SUITABLE_SERVER
} from '../constants';
import { type ReadPreference } from '../read_preference';
import { type ServerSelector } from './server_selection';
import type { TopologyDescription } from './topology_description';


export abstract class ServerSelectionEvent {
  
  selector: string | ReadPreference | ServerSelector;
  
  operation: string;
  
  topologyDescription: TopologyDescription;

  
  abstract name:
    | typeof SERVER_SELECTION_STARTED
    | typeof SERVER_SELECTION_SUCCEEDED
    | typeof SERVER_SELECTION_FAILED
    | typeof WAITING_FOR_SUITABLE_SERVER;

  abstract message: string;

  
  constructor(
    selector: string | ReadPreference | ServerSelector,
    topologyDescription: TopologyDescription,
    operation: string
  ) {
    this.selector = selector;
    this.operation = operation;
    this.topologyDescription = topologyDescription;
  }
}


export class ServerSelectionStartedEvent extends ServerSelectionEvent {
  
  name = SERVER_SELECTION_STARTED;
  message = 'Server selection started';

  
  constructor(
    selector: string | ReadPreference | ServerSelector,
    topologyDescription: TopologyDescription,
    operation: string
  ) {
    super(selector, topologyDescription, operation);
  }
}


export class ServerSelectionFailedEvent extends ServerSelectionEvent {
  
  name = SERVER_SELECTION_FAILED;
  message = 'Server selection failed';
  
  failure: Error;

  
  constructor(
    selector: string | ReadPreference | ServerSelector,
    topologyDescription: TopologyDescription,
    error: Error,
    operation: string
  ) {
    super(selector, topologyDescription, operation);
    this.failure = error;
  }
}


export class ServerSelectionSucceededEvent extends ServerSelectionEvent {
  
  name = SERVER_SELECTION_SUCCEEDED;
  message = 'Server selection succeeded';
  
  serverHost: string;
  
  serverPort: number | undefined;

  
  constructor(
    selector: string | ReadPreference | ServerSelector,
    topologyDescription: TopologyDescription,
    address: string,
    operation: string
  ) {
    super(selector, topologyDescription, operation);
    const { host, port } = HostAddress.fromString(address).toHostPort();
    this.serverHost = host;
    this.serverPort = port;
  }
}


export class WaitingForSuitableServerEvent extends ServerSelectionEvent {
  
  name = WAITING_FOR_SUITABLE_SERVER;
  message = 'Waiting for suitable server to become available';
  
  remainingTimeMS: number;

  
  constructor(
    selector: string | ReadPreference | ServerSelector,
    topologyDescription: TopologyDescription,
    remainingTimeMS: number,
    operation: string
  ) {
    super(selector, topologyDescription, operation);
    this.remainingTimeMS = remainingTimeMS;
  }
}
