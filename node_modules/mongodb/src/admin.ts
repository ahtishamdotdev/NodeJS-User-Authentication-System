import { type Document, resolveBSONOptions } from './bson';
import type { Db } from './db';
import type { CommandOperationOptions } from './operations/command';
import { executeOperation } from './operations/execute_operation';
import {
  ListDatabasesOperation,
  type ListDatabasesOptions,
  type ListDatabasesResult
} from './operations/list_databases';
import { RemoveUserOperation, type RemoveUserOptions } from './operations/remove_user';
import { RunAdminCommandOperation, type RunCommandOptions } from './operations/run_command';
import {
  ValidateCollectionOperation,
  type ValidateCollectionOptions
} from './operations/validate_collection';


export interface AdminPrivate {
  db: Db;
}


export class Admin {
  
  s: AdminPrivate;

  
  constructor(db: Db) {
    this.s = { db };
  }

  
  async command(command: Document, options?: RunCommandOptions): Promise<Document> {
    return await executeOperation(
      this.s.db.client,
      new RunAdminCommandOperation(command, {
        ...resolveBSONOptions(options),
        session: options?.session,
        readPreference: options?.readPreference,
        timeoutMS: options?.timeoutMS ?? this.s.db.timeoutMS
      })
    );
  }

  
  async buildInfo(options?: CommandOperationOptions): Promise<Document> {
    return await this.command({ buildinfo: 1 }, options);
  }

  
  async serverInfo(options?: CommandOperationOptions): Promise<Document> {
    return await this.command({ buildinfo: 1 }, options);
  }

  
  async serverStatus(options?: CommandOperationOptions): Promise<Document> {
    return await this.command({ serverStatus: 1 }, options);
  }

  
  async ping(options?: CommandOperationOptions): Promise<Document> {
    return await this.command({ ping: 1 }, options);
  }

  
  async removeUser(username: string, options?: RemoveUserOptions): Promise<boolean> {
    return await executeOperation(
      this.s.db.client,
      new RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options })
    );
  }

  
  async validateCollection(
    collectionName: string,
    options: ValidateCollectionOptions = {}
  ): Promise<Document> {
    return await executeOperation(
      this.s.db.client,
      new ValidateCollectionOperation(this, collectionName, options)
    );
  }

  
  async listDatabases(options?: ListDatabasesOptions): Promise<ListDatabasesResult> {
    return await executeOperation(
      this.s.db.client,
      new ListDatabasesOperation(this.s.db, { timeoutMS: this.s.db.timeoutMS, ...options })
    );
  }

  
  async replSetGetStatus(options?: CommandOperationOptions): Promise<Document> {
    return await this.command({ replSetGetStatus: 1 }, options);
  }
}
