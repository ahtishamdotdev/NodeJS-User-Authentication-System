import type { Binary } from '../../bson';
import { type AWSCredentialProvider } from '../../cmap/auth/aws_temporary_credentials';
import { loadAWSCredentials } from './aws';
import { loadAzureCredentials } from './azure';
import { loadGCPCredentials } from './gcp';


export type ClientEncryptionDataKeyProvider = keyof KMSProviders;


export interface AWSKMSProviderConfiguration {
  
  accessKeyId: string;

  
  secretAccessKey: string;

  
  sessionToken?: string;
}


export interface LocalKMSProviderConfiguration {
  
  key: Binary | Uint8Array | string;
}


export interface KMIPKMSProviderConfiguration {
  
  endpoint?: string;
}


export type AzureKMSProviderConfiguration =
  | {
      
      tenantId: string;

      
      clientId: string;

      
      clientSecret: string;

      
      identityPlatformEndpoint?: string | undefined;
    }
  | {
      
      accessToken: string;
    };


export type GCPKMSProviderConfiguration =
  | {
      
      email: string;

      
      privateKey: string | Buffer;

      
      endpoint?: string | undefined;
    }
  | {
      
      accessToken: string;
    };


export interface CredentialProviders {
  
  aws?: AWSCredentialProvider;
}


export interface KMSProviders {
  
  aws?: AWSKMSProviderConfiguration | Record<string, never>;
  [key: `aws:${string}`]: AWSKMSProviderConfiguration;

  
  local?: LocalKMSProviderConfiguration;
  [key: `local:${string}`]: LocalKMSProviderConfiguration;

  
  kmip?: KMIPKMSProviderConfiguration;
  [key: `kmip:${string}`]: KMIPKMSProviderConfiguration;

  
  azure?: AzureKMSProviderConfiguration | Record<string, never>;
  [key: `azure:${string}`]: AzureKMSProviderConfiguration;

  
  gcp?: GCPKMSProviderConfiguration | Record<string, never>;
  [key: `gcp:${string}`]: GCPKMSProviderConfiguration;
}


export function isEmptyCredentials(
  providerName: ClientEncryptionDataKeyProvider,
  kmsProviders: KMSProviders
): boolean {
  const provider = kmsProviders[providerName];
  if (provider == null) {
    return false;
  }
  return typeof provider === 'object' && Object.keys(provider).length === 0;
}


export async function refreshKMSCredentials(
  kmsProviders: KMSProviders,
  credentialProviders?: CredentialProviders
): Promise<KMSProviders> {
  let finalKMSProviders = kmsProviders;

  if (isEmptyCredentials('aws', kmsProviders)) {
    finalKMSProviders = await loadAWSCredentials(finalKMSProviders, credentialProviders?.aws);
  }

  if (isEmptyCredentials('gcp', kmsProviders)) {
    finalKMSProviders = await loadGCPCredentials(finalKMSProviders);
  }

  if (isEmptyCredentials('azure', kmsProviders)) {
    finalKMSProviders = await loadAzureCredentials(finalKMSProviders);
  }
  return finalKMSProviders;
}
