import { type Document } from '../../bson';
import type { Filter, OptionalId, UpdateFilter, WithoutId } from '../../mongo_types';
import type { CollationOptions, CommandOperationOptions } from '../../operations/command';
import type { Hint } from '../../operations/operation';
import { type Sort } from '../../sort';


export interface ClientBulkWriteOptions extends CommandOperationOptions {
  
  ordered?: boolean;
  
  bypassDocumentValidation?: boolean;
  
  let?: Document;
  
  verboseResults?: boolean;
}


export interface ClientWriteModel {
  
  namespace: string;
}


export interface ClientInsertOneModel<TSchema> extends ClientWriteModel {
  name: 'insertOne';
  
  document: OptionalId<TSchema>;
}


export interface ClientDeleteOneModel<TSchema> extends ClientWriteModel {
  name: 'deleteOne';
  
  filter: Filter<TSchema>;
  
  collation?: CollationOptions;
  
  hint?: Hint;
}


export interface ClientDeleteManyModel<TSchema> extends ClientWriteModel {
  name: 'deleteMany';
  
  filter: Filter<TSchema>;
  
  collation?: CollationOptions;
  
  hint?: Hint;
}


export interface ClientReplaceOneModel<TSchema> extends ClientWriteModel {
  name: 'replaceOne';
  
  filter: Filter<TSchema>;
  
  replacement: WithoutId<TSchema>;
  
  collation?: CollationOptions;
  
  hint?: Hint;
  
  upsert?: boolean;
  
  sort?: Sort;
}


export interface ClientUpdateOneModel<TSchema> extends ClientWriteModel {
  name: 'updateOne';
  
  filter: Filter<TSchema>;
  
  update: UpdateFilter<TSchema> | Document[];
  
  arrayFilters?: Document[];
  
  collation?: CollationOptions;
  
  hint?: Hint;
  
  upsert?: boolean;
  
  sort?: Sort;
}


export interface ClientUpdateManyModel<TSchema> extends ClientWriteModel {
  name: 'updateMany';
  
  filter: Filter<TSchema>;
  
  update: UpdateFilter<TSchema> | Document[];
  
  arrayFilters?: Document[];
  
  collation?: CollationOptions;
  
  hint?: Hint;
  
  upsert?: boolean;
}


export type AnyClientBulkWriteModel<TSchema extends Document> =
  | ClientInsertOneModel<TSchema>
  | ClientReplaceOneModel<TSchema>
  | ClientUpdateOneModel<TSchema>
  | ClientUpdateManyModel<TSchema>
  | ClientDeleteOneModel<TSchema>
  | ClientDeleteManyModel<TSchema>;


export type ClientBulkWriteModel<
  SchemaMap extends Record<string, Document> = Record<string, Document>
> = {
  [Namespace in keyof SchemaMap]: AnyClientBulkWriteModel<SchemaMap[Namespace]> & {
    namespace: Namespace;
  };
}[keyof SchemaMap];


export interface ClientBulkWriteResult {
  
  readonly acknowledged: boolean;
  
  readonly insertedCount: number;
  
  readonly upsertedCount: number;
  
  readonly matchedCount: number;
  
  readonly modifiedCount: number;
  
  readonly deletedCount: number;
  
  readonly insertResults?: ReadonlyMap<number, ClientInsertOneResult>;
  
  readonly updateResults?: ReadonlyMap<number, ClientUpdateResult>;
  
  readonly deleteResults?: ReadonlyMap<number, ClientDeleteResult>;
}


export interface ClientBulkWriteError {
  code: number;
  message: string;
}


export interface ClientInsertOneResult {
  
  insertedId: any;
}


export interface ClientUpdateResult {
  
  matchedCount: number;

  
  modifiedCount: number;

  
  upsertedId?: any;

  
  didUpsert: boolean;
}


export interface ClientDeleteResult {
  
  deletedCount: number;
}
