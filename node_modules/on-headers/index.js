

'use strict'



module.exports = onHeaders

var http = require('http')


var isAppendHeaderSupported = typeof http.ServerResponse.prototype.appendHeader === 'function'
var set1dArray = isAppendHeaderSupported ? set1dArrayWithAppend : set1dArrayWithSet



function createWriteHead (prevWriteHead, listener) {
  var fired = false

  
  return function writeHead (statusCode) {
    
    var args = setWriteHeadHeaders.apply(this, arguments)

    
    if (!fired) {
      fired = true
      listener.call(this)

      
      if (typeof args[0] === 'number' && this.statusCode !== args[0]) {
        args[0] = this.statusCode
        args.length = 1
      }
    }

    return prevWriteHead.apply(this, args)
  }
}



function onHeaders (res, listener) {
  if (!res) {
    throw new TypeError('argument res is required')
  }

  if (typeof listener !== 'function') {
    throw new TypeError('argument listener must be a function')
  }

  res.writeHead = createWriteHead(res.writeHead, listener)
}



function setHeadersFromArray (res, headers) {
  if (headers.length && Array.isArray(headers[0])) {
    
    set2dArray(res, headers)
  } else {
    
    if (headers.length % 2 !== 0) {
      throw new TypeError('headers array is malformed')
    }

    set1dArray(res, headers)
  }
}



function setHeadersFromObject (res, headers) {
  var keys = Object.keys(headers)
  for (var i = 0; i < keys.length; i++) {
    var k = keys[i]
    if (k) res.setHeader(k, headers[k])
  }
}



function setWriteHeadHeaders (statusCode) {
  var length = arguments.length
  var headerIndex = length > 1 && typeof arguments[1] === 'string'
    ? 2
    : 1

  var headers = length >= headerIndex + 1
    ? arguments[headerIndex]
    : undefined

  this.statusCode = statusCode

  if (Array.isArray(headers)) {
    
    setHeadersFromArray(this, headers)
  } else if (headers) {
    
    setHeadersFromObject(this, headers)
  }

  
  var args = new Array(Math.min(length, headerIndex))
  for (var i = 0; i < args.length; i++) {
    args[i] = arguments[i]
  }

  return args
}

function set2dArray (res, headers) {
  var key
  for (var i = 0; i < headers.length; i++) {
    key = headers[i][0]
    if (key) {
      res.setHeader(key, headers[i][1])
    }
  }
}

function set1dArrayWithAppend (res, headers) {
  for (var i = 0; i < headers.length; i += 2) {
    res.removeHeader(headers[i])
  }

  var key
  for (var j = 0; j < headers.length; j += 2) {
    key = headers[j]
    if (key) {
      res.appendHeader(key, headers[j + 1])
    }
  }
}

function set1dArrayWithSet (res, headers) {
  var key
  for (var i = 0; i < headers.length; i += 2) {
    key = headers[i]
    if (key) {
      res.setHeader(key, headers[i + 1])
    }
  }
}
